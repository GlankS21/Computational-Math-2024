package Lab4;

import Lab2.CalcParams;
import Lab2.DrawGrafic;
import Lab2.IFunction;
import Lab3.*;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;


/**
 * Панель параметров
 */
public class L4Params {
    public JPanel paramsPanel;
    /**
     * Комбобокс для выбора уравнения
     */
    private JComboBox funCombo;
    /**
     * Левая граница интервала для определения корня
     */
    private JFormattedTextField xa;
    /**
     * Правая граница интервала для определения корня
     */
    private JFormattedTextField xb;
    /**
     * Начальное количество отрезков
     */
    private JFormattedTextField startedN;
    /**
     * Точность решения
     */
    private JFormattedTextField precision;
    /**
     * Кнопка рассчитать уравнение
     */
    private JButton calculate;
    /**
     * Кнопка нарисовать график уравнения
     */
    private JButton drawChart;
    /**
     * Комбобокс для выбора метода решения уравнения
     */
    private JComboBox comboMethods;
    /**
     * Калькулятор всего
     */
    private L4CalculationProcess _calculation = null;
    /**
     * Рисовальщик графиков
     */
    private DrawGrafic _painter = null;

    /**
     * Установить рисовальщика
     *
     * @param draw рисовальщик
     */
    public void setPainter(DrawGrafic draw) {
        _painter = draw;
    }

    /**
     * Установить решальщика
     *
     * @param prc - компонент, который будет решать предложенную задачу
     */
    public void setCalcProcess(L4CalculationProcess prc) {
        _calculation = prc;
    }

    /**
     * Конструктор
     */
    public L4Params() {
        initComboboxes();
        setFormatters();
        calculate.addActionListener(this::startCalculation);
        drawChart.addActionListener(this::startDrawing);
    }

    /**
     * Запускает рисование графика функции
     *
     * @param e
     */
    private void startDrawing(ActionEvent e) {
        if (_painter != null)
            _painter.drawGrafic((IFunction) funCombo.getSelectedItem(), readParams());
    }

    /**
     * Записывает введенные параметры в класс CalcParams
     *
     * @return
     */
    public CalcParams readParams() {
        CalcParams params = new CalcParams();
        params.xa = ((Number) xa.getValue()).doubleValue();
        params.xb = ((Number) xb.getValue()).doubleValue();
        params.startingDelta = ((Number) startedN.getValue()).doubleValue();
        params.precision = ((Number) precision.getValue()).doubleValue();
        return params;
    }

    /**
     * Запускает расчет выбранного уравнения выбранным методом
     *
     * @param e
     */
    private void startCalculation(ActionEvent e) {

        if (_calculation != null) _calculation.startCalculation(
                (ISFunction) funCombo.getSelectedItem(),
                (ISMethod) comboMethods.getSelectedItem(),
                readParams());
    }


    /**
     * Записывает в комбобоксы уравнения, системы уравнений и вычислительные методы
     */
    private void initComboboxes() {
        funCombo.addItem(new SFunction1());
        funCombo.addItem(new SFunction2());
        funCombo.addItem(new SFunction3());

        comboMethods.addItem(new MRectangleLeft());
        comboMethods.addItem(new MRectangleRight());
        comboMethods.addItem(new MRectangleMiddle());
        comboMethods.addItem(new MTrapeziod());
        comboMethods.addItem(new MSimpson());

    }

    /**
     * Форматирует числовые поля для ввода
     */
    private void setFormatters() {
        NumberFormat number = new DecimalFormat("##0.#####");
        DefaultFormatterFactory dff = new DefaultFormatterFactory(new NumberFormatter(number));
        xa.setFormatterFactory(dff);
        xb.setFormatterFactory(dff);
        startedN.setFormatterFactory(dff);
        precision.setFormatterFactory(dff);

        xa.setValue(0.);
        xb.setValue(0.);
        startedN.setValue(4);
        precision.setValue(0.01);
    }

    /**
     * Метод записывает параметры в контролы панели
     *
     * @param params - параметры для расчета
     */
    public void setParams(CalcParams params) {
        xa.setValue(params.xa);
        xb.setValue(params.xb);
        startedN.setValue(params.startingDelta);
        precision.setValue(params.precision);


    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        paramsPanel = new JPanel();
        paramsPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 2, new Insets(2, 2, 2, 2), 10, -1));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, -1, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Укажите уравнение");
        paramsPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        funCombo = new JComboBox();
        paramsPanel.add(funCombo, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Пределы интегрирования");
        paramsPanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        paramsPanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        xa = new JFormattedTextField();
        panel1.add(xa, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        xb = new JFormattedTextField();
        panel1.add(xb, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Число разбиения интервала интегрирования");
        paramsPanel.add(label3, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        calculate = new JButton();
        calculate.setText("Вычислить интеграл");
        paramsPanel.add(calculate, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        drawChart = new JButton();
        drawChart.setText(" Нарисовать график функции");
        paramsPanel.add(drawChart, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Вычислительный метод");
        paramsPanel.add(label4, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        comboMethods = new JComboBox();
        paramsPanel.add(comboMethods, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        paramsPanel.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(219, 34), null, 0, false));
        startedN = new JFormattedTextField();
        startedN.setHorizontalAlignment(2);
        panel2.add(startedN, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Погрешность");
        panel2.add(label5, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        precision = new JFormattedTextField();
        panel2.add(precision, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return paramsPanel;
    }

}
